assert = require 'assert'
emport = require '../src/emport'

dir = "#{__dirname}/../examples/small-app/frontend"
# optional glob filter provided
map =
  'vendor/backbone.js':
    exports: 'Backbone', imports: '_'
  'vendor/underscore.js':
    exports: '_'
  'vendor/jquery.js':
    exports: '$'

paths = [ "#{dir} **/*.@(js|coffee)" ]

test 'example/small-app inclusion-order', (done) ->
  emport 'app.coffee', {map, paths, output: 'filenames'}, (err, paths) ->
    throw err if err?
    assert.deepEqual [
      'vendor/jquery.js'
      'vendor/underscore.js'
      'vendor/backbone.js'
      'widget.coffee'
      'app.coffee'
    ], paths, 'filenames output produces the script inclusion order'
    done()

test 'example/small-app', (done) ->
  emport 'app.coffee', {map, paths}, (err, js) ->
    throw err if err?
    assert.equal js, """// jquery

// underscore

// backbone

// Generated by CoffeeScript 2.0.0-beta6
this.Widget = function (super$) {
  extends$(Widget, super$);
  function Widget() {
  }
  Widget.prototype.initialize = function () {
    return console.log('initializing widget ...');
  };
  return Widget;
}(Backbone.View);
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
// Generated by CoffeeScript 2.0.0-beta6
$(function () {
  return new Widget;
});
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
    """
    done()

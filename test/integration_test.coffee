assert = require 'assert'
emport = require '../src/emport'

test "example/small-app", (done) ->
  dir = __dirname + '/../examples/small-app/frontend'
  # optional glob filter provided
  map =
    'vendor/jquery.js':
      exports: '$'
    'vendor/underscore.js':
      exports: '_'
    'vendor/backbone.js':
      exports: 'Backbone', imports: '_'
  emport 'app.coffee', {map, paths: [ dir + ' **/*.@(js|coffee)' ]}, (err, js) ->
    throw err if err?
    assert.equal js, """// jquery

// underscore

// backbone

// Generated by CoffeeScript 2.0.0-beta6
this.Widget = function (super$) {
  extends$(Widget, super$);
  function Widget() {
  }
  Widget.prototype.initialize = function () {
    return console.log('initializing widget ...');
  };
  return Widget;
}(Backbone.View);
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
// Generated by CoffeeScript 2.0.0-beta6
$(function () {
  return new Widget;
});
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
function isOwn$(o, p) {
  return {}.hasOwnProperty.call(o, p);
}
function extends$(child, parent) {
  for (var key in parent)
    if (isOwn$(parent, key))
      child[key] = parent[key];
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}
    """
    done()



test "example/small-app-with-error", (done) ->
  dir = __dirname + '/../examples/small-app/frontend'
  # optional glob filter provided
  map =
    'vendor/jquery.js':
      exports: '$'
    'vendor/underscore.js':
      exports: '_'
    'vendor/backbone.js':
      exports: 'Backbone', imports: '_'
  emport 'app-using-error-widget.coffee', {map, paths: [ dir + ' **/*.@(js|coffee)' ]}, (err, js) ->
    assert err.message.match "when processing widget-with-syntax-error.coffee"
    done()
